#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 2799 0 27 3 16 #"#lang plai-typed"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 3 #"num"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 6 #"number"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 4 #"bool"
0 0 23 3 2 #" ("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 3 #"add"
0 0 23 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 3 #"rhs"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 3 #"sub"
0 0 23 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 3 #"rhs"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 2 #"id"
0 0 23 3 2 #" ("
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 13 #";;changed fun"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 3 #"fun"
0 0 23 3 2 #" ("
0 0 14 3 6 #"params"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 23 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 8 #"paramtys"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 23 3 1 #" "
0 0 14 3 2 #"TE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 13 #";;changed app"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 3 #"app"
0 0 23 3 2 #" ("
0 0 14 3 8 #"fun-expr"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 9 #"arg-exprs"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 12 #";;added with"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 4 #"with"
0 0 23 3 2 #" ("
0 0 14 3 5 #"names"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 23 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 7 #"nametys"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 23 3 1 #" "
0 0 14 3 2 #"TE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 5 #"inits"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 12 #";;added try1"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 4 #"try1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"try-expr"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 11 #"catch-exprs"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 13 #";;added throw"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 5 #"throw"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 2 #"eq"
0 0 23 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 3 #"rhs"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 10 #"ifthenelse"
0 0 23 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 7 #"if-true"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 8 #"if-false"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 4 #"pair"
0 0 23 3 2 #" ("
0 0 14 3 9 #"first-ele"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 10 #"second-ele"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 3 #"fst"
0 0 23 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 3 #"snd"
0 0 23 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  )"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 23 3 1 #" "
0 0 14 3 2 #"TE"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 5 #"numTE"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 6 #"boolTE"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 7 #"arrowTE"
0 0 23 3 2 #" ("
0 0 14 3 4 #"args"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 23 3 1 #" "
0 0 14 3 2 #"TE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 6 #"result"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 2 #"TE"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 7 #"crossTE"
0 0 23 3 2 #" ("
0 0 14 3 7 #"firstTE"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 2 #"TE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 8 #"secondTE"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 2 #"TE"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  )"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";------------------------------------------"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 23 3 1 #" "
0 0 14 3 10 #"TFAE-Value"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 4 #"numV"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 6 #"number"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 8 #"closureV"
0 0 23 3 2 #" ("
0 0 14 3 5 #"param"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 23 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 2 #"ds"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 8 #"DefrdSub"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 5 #"boolV"
0 0 23 3 2 #" ("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 5 #"pairV"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 10 #"TFAE-Value"
0 0 23 3 3 #") ("
0 0 14 3 1 #"s"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 10 #"TFAE-Value"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 2 #";["
0 0 17 3 5 #"contV"
0 0 17 3 2 #" ("
0 0 17 3 4 #"proc"
0 0 17 3 1 #" "
0 0 17 3 1 #":"
0 0 17 3 12 #" procedure)]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  )"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";------------------------------------------"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 23 3 1 #" "
0 0 14 3 8 #"DefrdSub"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 5 #"mtSub"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 4 #"aSub"
0 0 23 3 2 #" ("
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 5 #"value"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 10 #"TFAE-Value"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 8 #"DefrdSub"
0 0 23 3 3 #")])"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";------------------------------------------"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 4 #"numT"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 5 #"boolT"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 6 #"arrowT"
0 0 23 3 2 #" ("
0 0 14 3 5 #"param"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 6 #"result"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 6 #"crossT"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 1 #"s"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 4 #"anyT"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  )"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";-------------------------------------------"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 23 3 1 #" "
0 0 14 3 7 #"TypeEnv"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 5 #"mtEnv"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 14 3 5 #"aBind"
0 0 23 3 2 #" ("
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 4 #"type"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 7 #"TypeEnv"
0 0 23 3 3 #")])"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";; ----------------------------------------"
0 0 23 29 1 #"\n"
0 0 17 3 10 #";;add-bind"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"add-bind"
0 0 23 3 1 #" "
0 0 14 3 5 #"names"
0 0 23 3 1 #" "
0 0 14 3 2 #"ts"
0 0 23 3 1 #" "
0 0 14 3 2 #"te"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 5 #"names"
0 0 23 3 2 #") "
0 0 14 3 2 #"te"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 14 3 8 #"add-bind"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"names"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"ts"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 5 #"aBind"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"names"
0 0 23 3 3 #") ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"ts"
0 0 23 3 2 #") "
0 0 14 3 2 #"te"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 17 3 10 #";; length:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 5 #")))])"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  )"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";;tests for length:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";;add-sub"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"add-sub"
0 0 23 3 1 #" "
0 0 14 3 5 #"names"
0 0 23 3 1 #" "
0 0 14 3 2 #"vs"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 5 #"names"
0 0 23 3 2 #") "
0 0 14 3 2 #"ds"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 14 3 7 #"add-sub"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"names"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"vs"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 4 #"aSub"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"names"
0 0 23 3 3 #") ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"vs"
0 0 23 3 2 #") "
0 0 14 3 2 #"ds"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";;----------------------------------------------------"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; interp : TFAE DefrdSub -> TFAE-Value"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 4 #"tfae"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 7 #"catcher"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 1 #" "
0 0 14 3 4 #"tfae"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 15 #";;done with num"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 3 #"num"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 16 #";;done with bool"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"bool"
0 0 23 3 2 #" ("
0 0 14 3 1 #"b"
0 0 23 3 3 #") ("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 5 #"boolV"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 15 #";;done with add"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 3 #"add"
0 0 23 3 2 #" ("
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 3 #") ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"v1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"v2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 4 #"num+"
0 0 23 3 1 #" "
0 0 14 3 2 #"v1"
0 0 23 3 1 #" "
0 0 14 3 2 #"v2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                 "
0 0 14 3 7 #"catcher"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 14 3 7 #"catcher"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 15 #";;done with sub"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 3 #"sub"
0 0 23 3 2 #" ("
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 3 #") ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"v1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"v2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 4 #"num-"
0 0 23 3 1 #" "
0 0 14 3 2 #"v1"
0 0 23 3 1 #" "
0 0 14 3 2 #"v2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                 "
0 0 14 3 7 #"catcher"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 14 3 7 #"catcher"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 14 #";;done with id"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 2 #"id"
0 0 23 3 2 #" ("
0 0 14 3 4 #"name"
0 0 23 3 3 #") ("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 15 #";;done with fun"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 3 #"fun"
0 0 23 3 2 #" ("
0 0 14 3 5 #"param"
0 0 23 3 1 #" "
0 0 14 3 8 #"param-te"
0 0 23 3 1 #" "
0 0 14 3 9 #"body-expr"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 8 #"closureV"
0 0 23 3 1 #" "
0 0 14 3 5 #"param"
0 0 23 3 1 #" "
0 0 14 3 9 #"body-expr"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 14 3 1 #"s"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 16 #";; done with app"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 3 #"app"
0 0 23 3 2 #" ("
0 0 14 3 8 #"fun-expr"
0 0 23 3 1 #" "
0 0 14 3 9 #"arg-exprs"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 17 3 8 #";(begin "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 57
#";(print \"fun-expr\" fun-expr) (print  \"arg-expr\" arg-expr)"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 7 #"fun-val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 11 #"interp-many"
0 0 23 3 1 #" "
0 0 14 3 9 #"arg-exprs"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 8 #"arg-vals"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                    ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 10 #"TFAE-Value"
0 0 23 3 1 #" "
0 0 14 3 7 #"fun-val"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ["
0 0 14 3 8 #"closureV"
0 0 23 3 2 #" ("
0 0 14 3 6 #"params"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 52 #"                                                  [("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 8 #"arg-vals"
0 0 23 3 3 #") ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 6 #"params"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 52 #"                                                   ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 19 3 26 #"\"Different number of args\""
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 29 1 #"\n"
0 0 23 3 57 #"                                                        ("
0 0 14 3 7 #"add-sub"
0 0 23 3 1 #" "
0 0 14 3 6 #"params"
0 0 23 29 1 #"\n"
0 0 23 3 65
#"                                                                 "
0 0 14 3 8 #"arg-vals"
0 0 23 29 1 #"\n"
0 0 23 3 65
#"                                                                 "
0 0 14 3 2 #"ds"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 56 #"                                                        "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 7 #"catcher"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 50 #"                                                )]"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 17 3 2 #";["
0 0 17 3 5 #"contV"
0 0 17 3 4 #" (k)"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 17 3 9 #";       ("
0 0 17 3 1 #"k"
0 0 17 3 2 #" ("
0 0 17 3 5 #"first"
0 0 17 3 12 #" arg-vals))]"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 19 3 16 #"\"not a function\""
0 0 23 3 4 #")]))"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                  "
0 0 14 3 7 #"catcher"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 14 3 7 #"catcher"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 17 3 2 #";)"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 2 #";["
0 0 17 3 2 #"eq"
0 0 17 3 2 #" ("
0 0 17 3 1 #"l"
0 0 17 3 1 #" "
0 0 17 3 1 #"r"
0 0 17 3 3 #") ("
0 0 17 3 4 #"num="
0 0 17 3 2 #" ("
0 0 17 3 6 #"interp"
0 0 17 3 1 #" "
0 0 17 3 1 #"l"
0 0 17 3 1 #" "
0 0 17 3 2 #"ds"
0 0 17 3 3 #") ("
0 0 17 3 6 #"interp"
0 0 17 3 1 #" "
0 0 17 3 1 #"r"
0 0 17 3 7 #" ds)) ]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 14 #";;done with eq"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 2 #"eq"
0 0 23 3 2 #" ("
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 3 #") ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"v1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"v2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 4 #"num="
0 0 23 3 1 #" "
0 0 14 3 2 #"v1"
0 0 23 3 1 #" "
0 0 14 3 2 #"v2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                 "
0 0 14 3 7 #"catcher"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 14 3 7 #"catcher"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 2 #";["
0 0 17 3 10 #"ifthenelse"
0 0 17 3 2 #" ("
0 0 17 3 9 #"pred-expr"
0 0 17 3 1 #" "
0 0 17 3 12 #"if-true-expr"
0 0 17 3 15 #" if-false-expr)"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 14 #";            ("
0 0 17 3 2 #"if"
0 0 17 3 2 #" ("
0 0 17 3 7 #"boolV-b"
0 0 17 3 2 #" ("
0 0 17 3 6 #"interp"
0 0 17 3 1 #" "
0 0 17 3 14 #"pred-expr ds))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 18 #";                ("
0 0 17 3 6 #"interp"
0 0 17 3 1 #" "
0 0 17 3 12 #"if-true-expr"
0 0 17 3 4 #" ds)"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 18 #";                ("
0 0 17 3 6 #"interp"
0 0 17 3 1 #" "
0 0 17 3 13 #"if-false-expr"
0 0 17 3 6 #" ds))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 10 #"ifthenelse"
0 0 23 3 2 #" ("
0 0 14 3 9 #"test-expr"
0 0 23 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 23 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"v"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 7 #"boolV-b"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 7 #"catcher"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 7 #"catcher"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 14 3 7 #"catcher"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 2 #";["
0 0 17 3 4 #"pair"
0 0 17 3 2 #" ("
0 0 17 3 1 #"f"
0 0 17 3 1 #" "
0 0 17 3 1 #"s"
0 0 17 3 3 #") ("
0 0 17 3 5 #"pairV"
0 0 17 3 2 #" ("
0 0 17 3 6 #"interp"
0 0 17 3 1 #" "
0 0 17 3 1 #"f"
0 0 17 3 1 #" "
0 0 17 3 2 #"ds"
0 0 17 3 3 #") ("
0 0 17 3 6 #"interp"
0 0 17 3 1 #" "
0 0 17 3 1 #"s"
0 0 17 3 6 #" ds))]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 16 #";;done with pair"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"pair"
0 0 23 3 2 #" ("
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 3 #") ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"v1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"v2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 5 #"pairV"
0 0 23 3 1 #" "
0 0 14 3 2 #"v1"
0 0 23 3 1 #" "
0 0 14 3 2 #"v2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                 "
0 0 14 3 7 #"catcher"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 14 3 7 #"catcher"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 3 #"fst"
0 0 23 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 23 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 10 #"TFAE-Value"
0 0 23 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 4 #"expr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 7 #"catcher"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ["
0 0 14 3 5 #"pairV"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 3 #") ("
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 19 3 12 #"\"not a pair\""
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                  )]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 3 #"snd"
0 0 23 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 23 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 10 #"TFAE-Value"
0 0 23 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 4 #"expr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 7 #"catcher"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ["
0 0 14 3 5 #"pairV"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 3 #") ("
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 19 3 12 #"\"not a pair\""
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                  )]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 2 #";["
0 0 17 3 4 #"with"
0 0 17 3 2 #" ("
0 0 17 3 5 #"names"
0 0 17 3 1 #" "
0 0 17 3 1 #":"
0 0 17 3 2 #" ("
0 0 17 3 6 #"listof"
0 0 17 3 1 #" "
0 0 17 3 8 #"symbol))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 6 #";    ("
0 0 17 3 7 #"nametys"
0 0 17 3 1 #" "
0 0 17 3 1 #":"
0 0 17 3 2 #" ("
0 0 17 3 6 #"listof"
0 0 17 3 1 #" "
0 0 17 3 4 #"TE))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 6 #";    ("
0 0 17 3 5 #"inits"
0 0 17 3 1 #" "
0 0 17 3 1 #":"
0 0 17 3 2 #" ("
0 0 17 3 6 #"listof"
0 0 17 3 1 #" "
0 0 17 3 6 #"TFAE))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 6 #";    ("
0 0 17 3 4 #"body"
0 0 17 3 1 #" "
0 0 17 3 1 #":"
0 0 17 3 1 #" "
0 0 17 3 6 #"TFAE)]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 2 #";["
0 0 17 3 3 #"fun"
0 0 17 3 2 #" ("
0 0 17 3 5 #"param"
0 0 17 3 1 #" "
0 0 17 3 8 #"param-te"
0 0 17 3 1 #" "
0 0 17 3 10 #"body-expr)"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 7 #";     ("
0 0 17 3 1 #"k"
0 0 17 3 2 #" ("
0 0 17 3 8 #"closureV"
0 0 17 3 1 #" "
0 0 17 3 5 #"param"
0 0 17 3 10 #" body-expr"
0 0 17 3 1 #" "
0 0 17 3 5 #"ds))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"with"
0 0 23 3 2 #" ("
0 0 14 3 5 #"names"
0 0 23 3 1 #" "
0 0 14 3 7 #"nametys"
0 0 23 3 1 #" "
0 0 14 3 5 #"inits"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 7 #"display"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 11 #"interp-many"
0 0 23 3 1 #" "
0 0 14 3 5 #"inits"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 8 #"arg-vals"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                             [("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 8 #"arg-vals"
0 0 23 3 3 #") ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 5 #"names"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 19 3 26 #"\"Different number of args\""
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 29 1 #"\n"
0 0 23 3 44 #"                                           ("
0 0 14 3 7 #"add-sub"
0 0 23 3 1 #" "
0 0 14 3 5 #"names"
0 0 23 29 1 #"\n"
0 0 23 3 52 #"                                                    "
0 0 14 3 8 #"arg-vals"
0 0 23 29 1 #"\n"
0 0 23 3 52 #"                                                    "
0 0 14 3 2 #"ds"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 7 #"catcher"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             )"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                           ) "
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 14 3 7 #"catcher"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            )"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"try1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"try-expr"
0 0 23 3 1 #" "
0 0 14 3 10 #"catch-expr"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 8 #"try-expr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 15 3 6 #"lambda"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 10 #"catch-expr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 7 #"catcher"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                       )]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 5 #"throw"
0 0 23 3 5 #" () ("
0 0 14 3 7 #"catcher"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"  ))"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";-------------------------------------------------------------------"
 #"--"
) 0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";;------------------------------------------------------------------"
 #"--"
) 0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";; interp-many: (listof KCFAE) DefrdSub (KCFAE-Value -> alpha) catch"
 #"er -> alpha"
) 0 0 23 29 1 #"\n"
0 0 17 3 97
(
 #";; return a procedure from calculating a procedure with a list of ar"
 #"guments and exception handler"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"interp-many"
0 0 23 3 1 #" "
0 0 14 3 12 #"list_of_expr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 7 #"catcher"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 12 #"list_of_expr"
0 0 23 3 3 #") ("
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 12 #"list_of_expr"
0 0 23 3 2 #") "
0 0 14 3 2 #"ds"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"val"
0 0 23 3 2 #") "
0 0 17 3 53 #";interp-many of the first element will return 1 value"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 11 #"interp-many"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 12 #"list_of_expr"
0 0 23 3 2 #") "
0 0 14 3 2 #"ds"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 23 3 3 #") ("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #" "
0 0 14 3 4 #"vals"
0 0 23 3 4 #"))) "
0 0 17 3 44 #"; interp-many of the rest will return a list"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                 "
0 0 14 3 7 #"catcher"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 14 3 7 #"catcher"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    )"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  )"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";;typecheck-many"
0 0 23 29 1 #"\n"
0 7         307 4           0 0           0 50 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"typecheck-many"
0 0 23 3 1 #" "
0 0 14 3 12 #"list_of_expr"
0 0 23 3 1 #" "
0 0 14 3 2 #"te"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 12 #"list_of_expr"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 12 #"list_of_expr"
0 0 23 3 2 #") "
0 0 14 3 2 #"te"
0 0 23 3 3 #") ("
0 0 14 3 14 #"typecheck-many"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 12 #"list_of_expr"
0 0 23 3 2 #") "
0 0 14 3 2 #"te"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    )"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  )"
0           0 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 78
(
 #";; num-op : (number number -> number) -> (TFAE-Value TFAE-Value -> T"
 #"FAE-Value)"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"num-op"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"numV"
0 0 23 3 2 #" ("
0 0 14 3 2 #"op"
0 0 23 3 2 #" ("
0 0 14 3 6 #"numV-n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 6 #"numV-n"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"num+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 3 #") ("
0 0 14 3 6 #"num-op"
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"num-"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 3 #") ("
0 0 14 3 6 #"num-op"
0 0 23 3 1 #" "
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"num="
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"boolV"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 6 #"numV-n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 6 #"numV-n"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  )"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 8 #"DefrdSub"
0 0 23 3 1 #" "
0 0 14 3 2 #"ds"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 5 #"mtSub"
0 0 23 3 5 #" () ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"lookup"
0 0 23 3 1 #" "
0 0 19 3 15 #"\"free variable\""
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"aSub"
0 0 23 3 2 #" ("
0 0 14 3 8 #"sub-name"
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 14 3 7 #"rest-ds"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 8 #"sub-name"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 14 3 3 #"num"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 6 #"lookup"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 7 #"rest-ds"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";; ----------------------------------------"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 23 3 1 #" "
0 0 14 3 12 #"name-to-find"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 7 #"TypeEnv"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 5 #"mtEnv"
0 0 23 3 5 #" () ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"get-type"
0 0 23 3 1 #" "
0 0 19 3 27 #"\"free variable, so no type\""
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 5 #"aBind"
0 0 23 3 2 #" ("
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 2 #"ty"
0 0 23 3 1 #" "
0 0 14 3 4 #"rest"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 12 #"name-to-find"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 14 3 2 #"ty"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 8 #"get-type"
0 0 23 3 1 #" "
0 0 14 3 12 #"name-to-find"
0 0 23 3 1 #" "
0 0 14 3 4 #"rest"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";; ----------------------------------------"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"parse-type"
0 0 23 3 1 #" "
0 0 14 3 2 #"te"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 2 #"TE"
0 0 23 3 1 #" "
0 0 14 3 2 #"te"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 5 #"numTE"
0 0 23 3 5 #" () ("
0 0 14 3 4 #"numT"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 6 #"boolTE"
0 0 23 3 5 #" () ("
0 0 14 3 5 #"boolT"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 41 #";(type1 type2 type3....) -> (type_result)"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 7 #"arrowTE"
0 0 23 3 2 #" ("
0 0 14 3 4 #"args"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 3 #") ("
0 0 14 3 6 #"arrowT"
0 0 23 3 2 #" ("
0 0 14 3 15 #"parse-type-many"
0 0 23 3 1 #" "
0 0 14 3 4 #"args"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 10 #"parse-type"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 7 #"crossTE"
0 0 23 3 2 #" ("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #") ("
0 0 14 3 6 #"crossT"
0 0 23 3 2 #" ("
0 0 14 3 10 #"parse-type"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 10 #"parse-type"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    ))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"parse-type-many"
0 0 23 3 1 #" "
0 0 14 3 5 #"aList"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 5 #"aList"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 10 #"parse-type"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"aList"
0 0 23 3 4 #")) ("
0 0 14 3 15 #"parse-type-many"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"aList"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"type-error"
0 0 23 3 1 #" "
0 0 14 3 4 #"tfae"
0 0 23 3 1 #" "
0 0 14 3 3 #"msg"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"typecheck"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 19 3 11 #"\"no type: \""
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 13 #"string-append"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 9 #"to-string"
0 0 23 3 1 #" "
0 0 14 3 4 #"tfae"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 7 #"\" not \""
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                     "
0 0 14 3 3 #"msg"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 7        3235 4           0 0           0 538 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 4 #"TFAE"
0 0 23 3 1 #" "
0 0 14 3 7 #"TypeEnv"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"tfae"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 4 #"TFAE"
0 0 23 3 1 #" "
0 0 14 3 4 #"tfae"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ["
0 0 14 3 3 #"num"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 4 #"numT"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ["
0 0 14 3 4 #"bool"
0 0 23 3 2 #" ("
0 0 14 3 1 #"b"
0 0 23 3 3 #") ("
0 0 14 3 5 #"boolT"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ["
0 0 14 3 3 #"add"
0 0 23 3 2 #" ("
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ["
0 0 14 3 4 #"numT"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ["
0 0 14 3 4 #"numT"
0 0 23 3 5 #" () ("
0 0 14 3 4 #"numT"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"type-error"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"num\""
0 0 23 3 4 #")])]"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"type-error"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"num\""
0 0 23 3 4 #")])]"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ["
0 0 14 3 3 #"sub"
0 0 23 3 2 #" ("
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ["
0 0 14 3 4 #"numT"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ["
0 0 14 3 4 #"numT"
0 0 23 3 5 #" () ("
0 0 14 3 4 #"numT"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"type-error"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"num\""
0 0 23 3 4 #")])]"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"type-error"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"num\""
0 0 23 3 4 #")])]"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ["
0 0 14 3 2 #"id"
0 0 23 3 2 #" ("
0 0 14 3 4 #"name"
0 0 23 3 3 #") ("
0 0 14 3 8 #"get-type"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ["
0 0 14 3 3 #"fun"
0 0 23 3 2 #" ("
0 0 14 3 5 #"names"
0 0 23 3 1 #" "
0 0 14 3 3 #"tes"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 5 #"local"
0 0 23 3 3 #" [("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"param-types"
0 0 23 3 2 #" ("
0 0 14 3 15 #"parse-type-many"
0 0 23 3 1 #" "
0 0 14 3 3 #"tes"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"arrowT"
0 0 23 3 1 #" "
0 0 14 3 11 #"param-types"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 2 #" ("
0 0 14 3 8 #"add-bind"
0 0 23 3 1 #" "
0 0 14 3 5 #"names"
0 0 23 29 1 #"\n"
0 0 23 3 44 #"                                            "
0 0 14 3 11 #"param-types"
0 0 23 29 1 #"\n"
0 0 23 3 44 #"                                            "
0 0 14 3 3 #"env"
0 0 23 3 5 #"))))]"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ["
0 0 14 3 3 #"app"
0 0 23 3 2 #" ("
0 0 14 3 2 #"fn"
0 0 23 3 1 #" "
0 0 14 3 4 #"args"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 2 #"fn"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ["
0 0 14 3 6 #"arrowT"
0 0 23 3 2 #" ("
0 0 14 3 11 #"param-types"
0 0 23 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 17 3 65
#";;need to check if all the elements of param-types match all the "
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 17 3 42 #";;elements of the result of typecheck-many"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 11 #"param-types"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 14 #"typecheck-many"
0 0 23 3 1 #" "
0 0 14 3 4 #"args"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 14 3 11 #"result-type"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 10 #"type-error"
0 0 23 3 1 #" "
0 0 14 3 4 #"args"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                     ("
0 0 14 3 9 #"to-string"
0 0 23 3 1 #" "
0 0 14 3 11 #"param-types"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"type-error"
0 0 23 3 1 #" "
0 0 14 3 2 #"fn"
0 0 23 3 1 #" "
0 0 19 3 10 #"\"function\""
0 0 23 3 4 #")])]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 17 3 19 #";;type-check for eq"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ["
0 0 14 3 2 #"eq"
0 0 23 3 2 #" ("
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ["
0 0 14 3 4 #"numT"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ["
0 0 14 3 4 #"numT"
0 0 23 3 5 #" () ("
0 0 14 3 5 #"boolT"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"type-error"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"num\""
0 0 23 3 4 #")])]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"type-error"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"num\""
0 0 23 3 4 #")])]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 17 3 28 #";; type-check for ifthenelse"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ["
0 0 14 3 10 #"ifthenelse"
0 0 23 3 2 #" ("
0 0 14 3 9 #"pred-expr"
0 0 23 3 1 #" "
0 0 14 3 12 #"if-true-expr"
0 0 23 3 1 #" "
0 0 14 3 12 #"if-else-expr"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 9 #"pred-expr"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ["
0 0 14 3 5 #"boolT"
0 0 23 3 4 #" () "
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 12 #"if-true-expr"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #") ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 12 #"if-else-expr"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 12 #"if-true-expr"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 10 #"type-error"
0 0 23 3 1 #" "
0 0 14 3 12 #"if-else-expr"
0 0 23 3 1 #" "
0 0 19 3 33 #"\"not the same as the true branch\""
0 0 23 3 4 #")) ]"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"type-error"
0 0 23 3 1 #" "
0 0 14 3 9 #"pred-expr"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"bool\""
0 0 23 3 4 #")])]"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ["
0 0 14 3 4 #"pair"
0 0 23 3 2 #" ("
0 0 14 3 3 #"fst"
0 0 23 3 1 #" "
0 0 14 3 3 #"snd"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 6 #"crossT"
0 0 23 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 3 #"fst"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #") ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 3 #"snd"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ["
0 0 14 3 3 #"fst"
0 0 23 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 4 #"expr"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ["
0 0 14 3 6 #"crossT"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #") "
0 0 14 3 1 #"f"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"type-error"
0 0 23 3 1 #" "
0 0 14 3 4 #"expr"
0 0 23 3 1 #" "
0 0 19 3 12 #"\"not a pair\""
0 0 23 3 4 #")])]"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ["
0 0 14 3 3 #"snd"
0 0 23 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 9 #"type-case"
0 0 23 3 1 #" "
0 0 14 3 4 #"Type"
0 0 23 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 4 #"expr"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ["
0 0 14 3 6 #"crossT"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #") "
0 0 14 3 1 #"s"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"type-error"
0 0 23 3 1 #" "
0 0 14 3 4 #"expr"
0 0 23 3 1 #" "
0 0 19 3 12 #"\"not a pair\""
0 0 23 3 4 #")])]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"      )))"
0           0 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"run"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 4 #"TFAE"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 10 #"TFAE-Value"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 5 #"tmfae"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 14 3 5 #"tmfae"
0 0 23 3 2 #" ("
0 0 14 3 5 #"mtSub"
0 0 23 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 2 #") "
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 23 3 5 #" () ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 23 3 1 #" "
0 0 19 3 11 #"\"unhandled\""
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 7         301 4           0 0           0 49 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 4 #"TFAE"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 10 #"TFAE-Value"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 5 #"tmfae"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 5 #"begin"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 3 #"try"
0 0 23 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 23 3 1 #" "
0 0 14 3 5 #"tmfae"
0 0 23 3 2 #" ("
0 0 14 3 5 #"mtEnv"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 6 #"lambda"
0 0 23 3 5 #" () ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"type-error"
0 0 23 3 1 #" "
0 0 19 3 11 #"\"typecheck\""
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 3 #"run"
0 0 23 3 1 #" "
0 0 14 3 5 #"tmfae"
0 0 23 3 4 #"))))"
0           0 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"test"
0 0 23 3 2 #" ("
0 0 14 3 3 #"run"
0 0 23 3 2 #" ("
0 0 14 3 3 #"fst"
0 0 23 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 23 3 2 #" ("
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 3 #") ("
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 7 #"))) ) ("
0 0 14 3 4 #"numV"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"test"
0 0 23 3 2 #" ("
0 0 14 3 3 #"run"
0 0 23 3 2 #" ("
0 0 14 3 3 #"snd"
0 0 23 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 23 3 2 #" ("
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 3 #") ("
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 7 #"))) ) ("
0 0 14 3 4 #"numV"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 4 #"test"
0 0 17 3 2 #" ("
0 0 17 3 9 #"typecheck"
0 0 17 3 2 #" ("
0 0 17 3 4 #"pair"
0 0 17 3 2 #" ("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 3 #") ("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 1 #"8"
0 0 17 3 4 #")) ("
0 0 17 3 5 #"mtEnv"
0 0 17 3 4 #")) ("
0 0 17 3 6 #"crossT"
0 0 17 3 2 #" ("
0 0 17 3 4 #"numT"
0 0 17 3 3 #") ("
0 0 17 3 7 #"numT)))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 4 #"test"
0 0 17 3 2 #" ("
0 0 17 3 9 #"typecheck"
0 0 17 3 2 #" ("
0 0 17 3 3 #"add"
0 0 17 3 2 #" ("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 3 #") ("
0 0 17 3 3 #"snd"
0 0 17 3 2 #" ("
0 0 17 3 4 #"pair"
0 0 17 3 2 #" ("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 3 #") ("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 1 #"8"
0 0 17 3 6 #")))) ("
0 0 17 3 5 #"mtEnv"
0 0 17 3 10 #")) (numT))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 7         169 4           0 0           0 27 0 23 3 1 #"("
0 0 14 3 4 #"test"
0 0 23 3 2 #" ("
0 0 14 3 3 #"run"
0 0 23 3 2 #" ("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"aSub"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 4 #") ))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0           0 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"test"
0 0 23 3 2 #" ("
0 0 14 3 3 #"run"
0 0 23 3 2 #" ("
0 0 14 3 3 #"app"
0 0 23 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 3 #") ("
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 23 3 5 #"))) ("
0 0 14 3 4 #"numV"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"test"
0 0 23 3 2 #" ("
0 0 14 3 3 #"run"
0 0 23 3 2 #" ("
0 0 14 3 3 #"app"
0 0 23 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 5 #"numTE"
0 0 23 3 3 #") ("
0 0 14 3 5 #"numTE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 3 #"sub"
0 0 23 3 2 #" ("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 3 #") ("
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 23 3 1 #" "
0 0 20 3 3 #"-10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"test"
0 0 23 3 2 #" ("
0 0 14 3 3 #"run"
0 0 23 3 2 #" ("
0 0 14 3 4 #"with"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 5 #"numTE"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 4 #")) ("
0 0 14 3 3 #"add"
0 0 23 3 2 #" ("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 6 #")))) ("
0 0 14 3 4 #"numV"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"test"
0 0 23 3 2 #" ("
0 0 14 3 3 #"run"
0 0 23 3 2 #" ("
0 0 14 3 4 #"with"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 5 #"numTE"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 3 #"add"
0 0 23 3 2 #" ("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 4 #"with"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 5 #"numTE"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 4 #")) ("
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                      ))) ("
0 0 14 3 4 #"numV"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 4 #"test"
0 0 17 3 2 #" ("
0 0 17 3 9 #"typecheck"
0 0 17 3 2 #" ("
0 0 17 3 3 #"fun"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"x"
0 0 17 3 2 #" ("
0 0 17 3 5 #"numTE"
0 0 17 3 3 #") ("
0 0 17 3 3 #"add"
0 0 17 3 2 #" ("
0 0 17 3 2 #"id"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"x"
0 0 17 3 3 #") ("
0 0 17 3 3 #"num"
0 0 17 3 15 #" 12))) (mtEnv))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 29 #"      (arrowT (numT) (numT)))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"(test"
0 0 17 3 2 #" ("
0 0 17 3 9 #"typecheck"
0 0 17 3 2 #" ("
0 0 17 3 3 #"fun"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"x"
0 0 17 3 2 #" ("
0 0 17 3 7 #"crossTE"
0 0 17 3 18 #" (numTE) (boolTE))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 23 #"                      ("
0 0 17 3 10 #"ifthenelse"
0 0 17 3 2 #" ("
0 0 17 3 3 #"snd"
0 0 17 3 2 #" ("
0 0 17 3 2 #"id"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"x"
0 0 17 3 4 #")) ("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #") ("
0 0 17 3 3 #"fst"
0 0 17 3 2 #" ("
0 0 17 3 9 #"id 'x))))"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";                 (mtEnv))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 15 #"      (arrowT ("
0 0 17 3 6 #"crossT"
0 0 17 3 2 #" ("
0 0 17 3 4 #"numT"
0 0 17 3 19 #") (boolT)) (numT)))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 8 #"test/exn"
0 0 17 3 2 #" ("
0 0 17 3 9 #"typecheck"
0 0 17 3 2 #" ("
0 0 17 3 3 #"fst"
0 0 17 3 2 #" ("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 13 #")) (mtEnv)) \""
0 0 17 3 2 #"no"
0 0 17 3 1 #" "
0 0 17 3 6 #"type\")"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 8 #"test/exn"
0 0 17 3 2 #" ("
0 0 17 3 9 #"typecheck"
0 0 17 3 2 #" ("
0 0 17 3 3 #"add"
0 0 17 3 2 #" ("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 3 #") ("
0 0 17 3 3 #"fst"
0 0 17 3 2 #" ("
0 0 17 3 4 #"pair"
0 0 17 3 2 #" ("
0 0 17 3 4 #"bool"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 3 #") ("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 1 #"8"
0 0 17 3 15 #")))) (mtEnv)) \""
0 0 17 3 2 #"no"
0 0 17 3 1 #" "
0 0 17 3 6 #"type\")"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 8 #"test/exn"
0 0 17 3 2 #" ("
0 0 17 3 9 #"typecheck"
0 0 17 3 2 #" ("
0 0 17 3 3 #"fun"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"x"
0 0 17 3 2 #" ("
0 0 17 3 7 #"crossTE"
0 0 17 3 18 #" (numTE) (boolTE))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 27 #"                          ("
0 0 17 3 10 #"ifthenelse"
0 0 17 3 2 #" ("
0 0 17 3 3 #"fst"
0 0 17 3 4 #" (id"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"x"
0 0 17 3 4 #")) ("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #") ("
0 0 17 3 3 #"fst"
0 0 17 3 2 #" ("
0 0 17 3 9 #"id 'x))))"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";                     (mtEnv))"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";          \""
0 0 17 3 2 #"no"
0 0 17 3 1 #" "
0 0 17 3 6 #"type\")"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 4 #"test"
0 0 17 3 2 #" ("
0 0 17 3 6 #"interp"
0 0 17 3 2 #" ("
0 0 17 3 2 #"eq"
0 0 17 3 9 #" (num 13)"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 19 #"                  ("
0 0 17 3 10 #"ifthenelse"
0 0 17 3 2 #" ("
0 0 17 3 2 #"eq"
0 0 17 3 2 #" ("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 3 #") ("
0 0 17 3 3 #"add"
0 0 17 3 2 #" ("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 2 #"-1"
0 0 17 3 11 #") (num 2)))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 38 #"                              (num 12)"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 40 #"                              (num 13)))"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";              (mtSub))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 20 #"      (boolV false))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 4 #"test"
0 0 17 3 2 #" ("
0 0 17 3 9 #"typecheck"
0 0 17 3 2 #" ("
0 0 17 3 2 #"eq"
0 0 17 3 9 #" (num 13)"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 22 #"                     ("
0 0 17 3 10 #"ifthenelse"
0 0 17 3 2 #" ("
0 0 17 3 2 #"eq"
0 0 17 3 2 #" ("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 3 #") ("
0 0 17 3 3 #"add"
0 0 17 3 2 #" ("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 2 #"-1"
0 0 17 3 11 #") (num 2)))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 41 #"                                 (num 12)"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 43 #"                                 (num 13)))"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";                 (mtEnv))"
0 0 23 29 1 #"\n"
0 0 17 3 15 #";      (boolT))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 8 #"test/exn"
0 0 17 3 2 #" ("
0 0 17 3 9 #"typecheck"
0 0 17 3 2 #" ("
0 0 17 3 3 #"add"
0 0 17 3 8 #" (num 1)"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 27 #"                          ("
0 0 17 3 10 #"ifthenelse"
0 0 17 3 12 #" (bool true)"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 49 #"                                      (bool true)"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 52 #"                                      (bool false)))"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";                     (mtEnv))"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";          \""
0 0 17 3 2 #"no"
0 0 17 3 1 #" "
0 0 17 3 6 #"type\")"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";; ----------------------------------------"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";(test (interp (num 10)"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";              (mtSub))"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";      (numV 10))"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";(test (interp (add (num 10) (num 17))"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";              (mtSub))"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";      (numV 27))"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";(test (interp (sub (num 10) (num 7))"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";              (mtSub))"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";      (numV 3))"
0 0 23 29 1 #"\n"
0 0 17 3 59
#";(test (interp (app (fun 'x (numTE) (add (id 'x) (num 12)))"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";                   (add (num 1) (num 17)))"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";              (mtSub))"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";      (numV 30))"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";(test (interp (id 'x)"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";              (aSub 'x (numV 10) (mtSub)))"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";      (numV 10))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";(test (interp (app (fun 'x (numTE)"
0 0 23 29 1 #"\n"
0 0 17 3 63
#";                        (app (fun 'f (arrowTE (numTE) (numTE))"
0 0 23 29 1 #"\n"
0 0 17 3 61
#";                                  (add (app (id 'f) (num 1))"
0 0 23 29 1 #"\n"
0 0 17 3 60
#";                                       (app (fun 'x (numTE)"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";                                                 (app (id 'f)"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";                                                      (num 2)))"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";                                            (num 3))))"
0 0 23 29 1 #"\n"
0 0 17 3 45 #";                             (fun 'y (numTE)"
0 0 23 29 1 #"\n"
0 0 17 3 59
#";                                  (add (id 'x) (id 'y)))))"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";                   (num 0))"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";              (mtSub))"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";      (numV 3))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";(test/exn (interp (id 'x) (mtSub))"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";          \""
0 0 17 3 4 #"free"
0 0 17 3 1 #" "
0 0 17 3 10 #"variable\")"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";(test (typecheck (num 10) (mtEnv))"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";      (numT))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";(test (typecheck (add (num 10) (num 17)) (mtEnv))"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";      (numT))"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";(test (typecheck (sub (num 10) (num 7)) (mtEnv))"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";      (numT))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 17 3 66
#";(test (typecheck (fun 'x (numTE) (add (id 'x) (num 12))) (mtEnv))"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";      (arrowT (numT) (numT)))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";(test (typecheck (fun 'x (numTE) (fun 'y (boolTE) (id 'x))) (mtEnv)"
 #")"
) 0 0 23 29 1 #"\n"
0 0 17 3 48 #";      (arrowT (numT) (arrowT (boolT)  (numT))))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";(test (typecheck (app (fun 'x (numTE) (add (id 'x) (num 12)))"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";                      (add (num 1) (num 17)))"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";                 (mtEnv))"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";      (numT))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";(test (typecheck (app (fun 'x (numTE)"
0 0 23 29 1 #"\n"
0 0 17 3 66
#";                           (app (fun 'f (arrowTE (numTE) (numTE))"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";                                     (add (app (id 'f) (num 1))"
0 0 23 29 1 #"\n"
0 0 17 3 86
(
 #";                                          (app (fun 'x (numTE) (app"
 #" (id 'f) (num 2)))"
) 0 0 23 29 1 #"\n"
0 0 17 3 58
#";                                               (num 3))))"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";                                (fun 'y (numTE)"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";                                     (add (id 'x)"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";                                          (id' y)))))"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";                      (num 0))"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";                 (mtEnv))"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";      (numT))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 17 3 52 #";(test/exn (typecheck (app (num 1) (num 2)) (mtEnv))"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";          \""
0 0 17 3 2 #"no"
0 0 17 3 1 #" "
0 0 17 3 6 #"type\")"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 17 3 52 #";(test/exn (typecheck (add (fun 'x (numTE) (num 12))"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";                          (num 2))"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";                     (mtEnv))"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";          \""
0 0 17 3 2 #"no"
0 0 17 3 1 #" "
0 0 17 3 6 #"type\")"
0           0
